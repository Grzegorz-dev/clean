// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- ENUMY ---

enum Role {
  CLIENT
  PROVIDER
}

enum DayOfWeek {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

enum OrderStatus {
  NEW
  ACCEPTED
  REJECTED
  DONE
  CANCELED
}

enum Plan {
  BASIC
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
}

// --- MODELE ---

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String? // przy NextAuth może być null
  role      Role     @default(CLIENT)
  createdAt DateTime @default(now())

  providerProfile ProviderProfile?
  clientOrders    Order[]          @relation("ClientOrders")
  messages        Message[]        @relation("UserMessages")
  reviews         Review[]         @relation("AuthorReviews")
}

model ProviderProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  name            String
  phone           String?
  city            String
  street          String?
  country         String  @default("Polska")
  avatarUrl       String?
  bio             String?
  travelCost      Int     @default(0)
  calcClientRoute Boolean @default(false)
  gallery         Json    @default("[]")

  services      Service[]
  availability  Availability[]
  orders        Order[]        @relation("ProviderOrders")
  reviews       Review[]
  subscriptions Subscription[]
}

model Service {
  id           String          @id @default(cuid())
  providerId   String
  provider     ProviderProfile @relation(fields: [providerId], references: [id])
  name         String
  pricePerHour Int
  Order        Order[]
}

model Availability {
  id         String          @id @default(cuid())
  providerId String
  provider   ProviderProfile @relation(fields: [providerId], references: [id])
  day        DayOfWeek
  timeRanges Json            @default("[]") // np. ["08:00-16:00","18:00-20:00"]
}

model Order {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  clientId String
  client   User   @relation("ClientOrders", fields: [clientId], references: [id])

  providerId String
  provider   ProviderProfile @relation("ProviderOrders", fields: [providerId], references: [id])

  serviceId String?
  service   Service? @relation(fields: [serviceId], references: [id])

  hours  Int
  city   String
  street String?
  status OrderStatus @default(NEW)

  thread MessageThread?
}

model MessageThread {
  id       String    @id @default(cuid())
  orderId  String    @unique
  order    Order     @relation(fields: [orderId], references: [id])
  messages Message[]
}

model Message {
  id       String        @id @default(cuid())
  threadId String
  thread   MessageThread @relation(fields: [threadId], references: [id])

  senderId String
  sender   User   @relation("UserMessages", fields: [senderId], references: [id])

  text      String
  createdAt DateTime  @default(now())
  readAt    DateTime?
}

model Review {
  id         String          @id @default(cuid())
  providerId String
  provider   ProviderProfile @relation(fields: [providerId], references: [id])

  authorId String
  author   User   @relation("AuthorReviews", fields: [authorId], references: [id])

  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model Subscription {
  id         String          @id @default(cuid())
  providerId String
  provider   ProviderProfile @relation(fields: [providerId], references: [id])

  plan             Plan               @default(BASIC)
  status           SubscriptionStatus @default(ACTIVE)
  currentPeriodEnd DateTime
}

model VerificationCode {
  id           String   @id @default(cuid())
  email        String   @unique
  code         String   // 6 cyfr
  passwordHash String   // hash hasła z kroku 1
  role         Role
  expiresAt    DateTime
  consumed     Boolean  @default(false)
  createdAt    DateTime @default(now())
}
